import gradio as gr
from post_classification import PostClassificationApp

app = PostClassificationApp()

def create_interface():
    with gr.Blocks(title="Post Classification App", theme=gr.themes.Soft()) as demo:
        gr.Markdown("""
        # ü§ñ ·ª®ng d·ª•ng Ph√¢n lo·∫°i b√†i ƒëƒÉng Facebook               
        H·ªó tr·ª£ x·ª≠ l√Ω post ƒë∆°n l·∫ª v√† theo batch d∆∞·ªõi d·∫°ng file csv. ·ª®ng d·ª•ng h·ªó tr·ª£ ph√¢n lo·∫°i b√†i ƒëƒÉng b·∫±ng hai m√¥ h√¨nh:
        - **BiLSTM+CNN**: S·ª≠ d·ª•ng pretrained word embeddings phoW2V v√† ki·∫øn tr√∫c k·∫øt h·ª£p BiLSTM v√† CNN
        - **PhoBERT**: M√¥ h√¨nh BERT ƒë∆∞·ª£c fine-tune cho ti·∫øng Vi·ªát
        """)
        
        with gr.Tabs():
            # Tab 1: Single text prediction
            with gr.TabItem("üìù Ph√¢n lo·∫°i vƒÉn b·∫£n ƒë∆°n"):
                with gr.Row():
                    with gr.Column(scale=2):
                        model_choice_single = gr.Dropdown(
                            choices=["BiLSTM+CNN", "PhoBERT"],
                            label="Ch·ªçn m√¥ h√¨nh",
                            value="PhoBERT"
                        )
                        
                        text_input = gr.Textbox(
                            label="Nh·∫≠p vƒÉn b·∫£n c·∫ßn ph√¢n lo·∫°i",
                            placeholder="V√≠ d·ª•: C√¥ng ngh·ªá ng√†y c√†ng ph√°t tri·ªÉn k√©o theo nhi·ªÅu v·∫•n ƒë·ªÅ m·ªõi...",
                            lines=5
                        )
                        
                        predict_btn = gr.Button("Ph√¢n lo·∫°i", variant="primary")
                        clear_btn = gr.Button("X√≥a", variant="secondary")
                    
                    with gr.Column(scale=2):
                        result_output = gr.Markdown(label="K·∫øt qu·∫£")

                gr.Examples(
                    examples=[
                        ["Trong b·ªëi c·∫£nh n·ªÅn kinh t·∫ø to√†n c·∫ßu ng√†y c√†ng bi·∫øn ƒë·ªông, ƒë·∫ßu t∆∞ th√¥ng minh tr·ªü th√†nh m·ªôt trong nh·ªØng c√°ch hi·ªáu qu·∫£ nh·∫•t ƒë·ªÉ gia tƒÉng t√†i s·∫£n. ƒê√¢y kh√¥ng ch·ªâ l√† vi·ªác d√†nh ra m·ªôt ph·∫ßn thu nh·∫≠p ƒë·ªÉ ƒë·ªÉ d√†nh m√† c√≤n l√† c√°ch t·ªëi ∆∞u h√≥a ti·ªÅn b·∫°c, gi√∫p n√≥ sinh l·ªùi m·ªôt c√°ch b·ªÅn v·ªØng.", "PhoBERT"],
                        ["Hi·ªán nay, c√°c th√†nh ph·ªë l·ªõn v√† khu v·ª±c ven ƒë√¥ ƒëang tr·ªü th√†nh ƒëi·ªÉm n√≥ng tr√™n th·ªã tr∆∞·ªùng b·∫•t ƒë·ªông s·∫£n. S·ª± ph√°t tri·ªÉn h·∫° t·∫ßng giao th√¥ng, nh∆∞ ƒë∆∞·ªùng cao t·ªëc, t√†u ƒëi·ªán ng·∫ßm, v√† c√°c khu c√¥ng nghi·ªáp, t·∫°o ƒë·ªông l·ª±c l·ªõn cho gi√° tr·ªã b·∫•t ƒë·ªông s·∫£n gia tƒÉng. Nh·ªØng khu v·ª±c c√≥ ti·ªÅm nƒÉng ph√°t tri·ªÉn cao th∆∞·ªùng thu h√∫t nhi·ªÅu nh√† ƒë·∫ßu t∆∞ nh·ªù kh·∫£ nƒÉng sinh l·ªùi v∆∞·ª£t tr·ªôi trong trung v√† d√†i h·∫°n.", "BiLSTM+CNN"],
                        ["B∆∞·ªõc ƒë·∫ßu ti√™n ƒë·ªÉ ti·∫øn t·ªõi t·ª± do t√†i ch√≠nh l√† hi·ªÉu r√µ t√¨nh h√¨nh t√†i ch√≠nh c√° nh√¢n. ƒêi·ªÅu n√†y bao g·ªìm vi·ªác theo d√µi thu nh·∫≠p, chi ti√™u, v√† t√†i s·∫£n hi·ªán c√≥. M·ªôt k·∫ø ho·∫°ch ng√¢n s√°ch ch·∫∑t ch·∫Ω s·∫Ω gi√∫p b·∫°n ki·ªÉm so√°t d√≤ng ti·ªÅn, ƒë·ªìng th·ªùi x√°c ƒë·ªãnh ƒë∆∞·ª£c kho·∫£n ti·∫øt ki·ªám c·∫ßn thi·∫øt ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c c√°c m·ª•c ti√™u trong t∆∞∆°ng lai.", "PhoBERT"],
                        ["VƒÉn h√≥a ·∫©m th·ª±c c·ªßa m·ªói qu·ªëc gia l√† s·ª± k·∫øt h·ª£p ƒë·ªôc ƒë√°o gi·ªØa c√°c nguy√™n li·ªáu v√† ph∆∞∆°ng ph√°p ch·∫ø bi·∫øn, t·∫°o n√™n nh·ªØng m√≥n ƒÉn ƒë·∫∑c tr∆∞ng ri√™ng bi·ªát. Trong ƒë√≥, ƒë·ªì ƒÉn kh√¥ng ch·ªâ l√† s·ª± k·∫øt h·ª£p gi·ªØa c√°c th·ª±c ph·∫©m m√† c√≤n l√† m·ªôt ph·∫ßn quan tr·ªçng trong vi·ªác duy tr√¨ s·ª©c kh·ªèe, l√†m ƒë·∫πp v√† th·ªÉ hi·ªán s·ª± s√°ng t·∫°o c·ªßa ng∆∞·ªùi n·∫•u. ·ªû m·ªói qu·ªëc gia, ƒë·ªì ƒÉn v√† ƒë·ªì u·ªëng ƒë·ªÅu c√≥ nh·ªØng ƒë·∫∑c tr∆∞ng ri√™ng bi·ªát", "BiLSTM+CNN"]
                    ],
                    inputs=[text_input, model_choice_single],
                    label="V√≠ d·ª•"
                )
            
            # Tab 2: CSV file processing
            with gr.TabItem("üìä X·ª≠ l√Ω file CSV"):
                with gr.Row():
                    with gr.Column(scale=1):
                        model_choice_csv = gr.Dropdown(
                            choices=["BiLSTM+CNN", "PhoBERT"],
                            label="Ch·ªçn m√¥ h√¨nh",
                            value="PhoBERT"
                        )
                        
                        csv_file = gr.File(
                            label="Upload file CSV",
                            file_types=[".csv"],
                            type="filepath"
                        )
                        
                        text_column = gr.Textbox(
                            label="T√™n c·ªôt ch·ª©a vƒÉn b·∫£n",
                            placeholder="V√≠ d·ª•: text, content, description",
                            value="text"
                        )
                        
                        process_btn = gr.Button("X·ª≠ l√Ω file", variant="primary")
                    
                    with gr.Column(scale=2):
                        csv_result = gr.Markdown(label="K·∫øt qu·∫£ x·ª≠ l√Ω")
                        
                        download_file = gr.File(
                            label="T·∫£i xu·ªëng k·∫øt qu·∫£",
                            visible=False
                        )
                
                gr.Markdown("""
                ### üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:
                1. **Ch·ªçn m√¥ h√¨nh** b·∫°n mu·ªën s·ª≠ d·ª•ng
                2. **Upload file CSV** ch·ª©a d·ªØ li·ªáu vƒÉn b·∫£n
                3. **Nh·∫≠p t√™n c·ªôt** ch·ª©a vƒÉn b·∫£n c·∫ßn ph√¢n lo·∫°i
                4. **Nh·∫•n "X·ª≠ l√Ω file"** ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n lo·∫°i
                5. **T·∫£i xu·ªëng k·∫øt qu·∫£** sau khi x·ª≠ l√Ω xong
                
                ‚ö†Ô∏è **L∆∞u √Ω:** File CSV ph·∫£i c√≥ header v√† ƒë∆∞·ª£c m√£ h√≥a UTF-8
                """)
        
        # Event handlers
        predict_btn.click(
            fn=app.predict_single_text,
            inputs=[text_input, model_choice_single],
            outputs=[result_output, gr.Textbox(visible=False)]
        )
        
        clear_btn.click(
            fn=lambda: ("", ""),
            outputs=[text_input, result_output]
        )
        
        def process_and_show_download(file, model, column):
            result, output_file = app.process_csv_file(file, model, column)
            if output_file:
                return result, gr.File(value=output_file, visible=True)
            else:
                return result, gr.File(visible=False)
        
        process_btn.click(
            fn=process_and_show_download,
            inputs=[csv_file, model_choice_csv, text_column],
            outputs=[csv_result, download_file]
        )

        gr.Markdown("""
        ---
        
        üîß **Th√¥ng tin k·ªπ thu·∫≠t:**
        - **BiLSTM+CNN**: S·ª≠ d·ª•ng pretrained word embeddings phoW2V v√† ki·∫øn tr√∫c k·∫øt h·ª£p BiLSTM v√† CNN
        - **PhoBERT**: M√¥ h√¨nh BERT ƒë∆∞·ª£c fine-tune cho ti·∫øng Vi·ªát
        - H·ªó tr·ª£ x·ª≠ l√Ω batch cho file CSV
        - T∆∞∆°ng th√≠ch v·ªõi GPU v√† CPU
        """)
    
    return demo

if __name__ == "__main__":
    demo = create_interface()
    demo.launch(
        server_name="localhost",
        server_port=8080,
        debug=True
    )